// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5124.WestTorranceSwagbotics2016;
// AYY LMAO HEY ZACH it's burripshito here 
// how are you doing rn friend 
// I'm incredibly tired right now 
// it's 2/13/16 7:48pm
// I hope you know you are a beloved cinnamon roll too innocent and pure for this world 
// Alrighty m8y I am done here
// godbye
// #ripshita 
// #watergame

import com.ctre.CANTalon;

import edu.wpi.first.wpilibj.ADXL362;
import edu.wpi.first.wpilibj.ADXRS450_Gyro;
import edu.wpi.first.wpilibj.AnalogPotentiometer;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.Relay;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.VictorSP;
import edu.wpi.first.wpilibj.interfaces.Accelerometer.Range;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;


/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    public static SpeedController driveTrainLeft1;
    public static SpeedController driveTrainLeft2;
    public static SpeedController driveTrainRight1;
    public static SpeedController driveTrainRight2;
    public static RobotDrive driveTrainRobotDrive;
    public static Compressor driveTrainCompressor;
    public static DoubleSolenoid catapultCatapultSolenoid1;
    public static DoubleSolenoid catapultCatapultSolenoid2;
    public static SpeedController intakeIntakeMotor;
    public static CANTalon intakeIntakePositioner;
    public static DoubleSolenoid flipperFlipperSolenoid;
    public static Encoder encoder;
    public static ADXL362 accel; 
	public static ADXRS450_Gyro gyro;
	public static AnalogPotentiometer pot;
	public static Relay flashLightRelay;

    public static void init() {
        driveTrainLeft1 = new VictorSP(5);
        LiveWindow.addActuator("Drive Train", "Left 1", (VictorSP) driveTrainLeft1);
        
        driveTrainLeft2 = new VictorSP(6);
        LiveWindow.addActuator("Drive Train", "Left 2", (VictorSP) driveTrainLeft2);
        
        driveTrainRight1 = new VictorSP(8);
        LiveWindow.addActuator("Drive Train", "Right 1", (VictorSP) driveTrainRight1);
        
        driveTrainRight2 = new VictorSP(9);
        LiveWindow.addActuator("Drive Train", "Right 2", (VictorSP) driveTrainRight2);
        
        driveTrainRobotDrive = new RobotDrive(driveTrainLeft1, driveTrainLeft2,
              driveTrainRight1, driveTrainRight2);
        
        driveTrainRobotDrive.setSafetyEnabled(true);
        driveTrainRobotDrive.setExpiration(0.1);
        driveTrainRobotDrive.setSensitivity(0.2);
        driveTrainRobotDrive.setMaxOutput(1.0);
        driveTrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kFrontLeft, true);
        driveTrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kRearLeft, true);
        driveTrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kFrontRight, true);
        driveTrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
        driveTrainCompressor = new Compressor(0);
        
        
        catapultCatapultSolenoid1 = new DoubleSolenoid(0, 2, 5);
        LiveWindow.addActuator("Catapult", "Catapult Solenoid 1", catapultCatapultSolenoid1);
        
        catapultCatapultSolenoid2 = new DoubleSolenoid(0, 1, 6);
        LiveWindow.addActuator("Catapult", "Catapult Solenoid 2", catapultCatapultSolenoid2);
        
        flipperFlipperSolenoid = new DoubleSolenoid(0, 0, 7);
        LiveWindow.addActuator("Flipper", "Flipper Solenoid", flipperFlipperSolenoid);
        
        intakeIntakeMotor = new VictorSP(7);
        LiveWindow.addActuator("Intake", "Intake Motor", (VictorSP) intakeIntakeMotor);
        
        intakeIntakePositioner = new CANTalon(2);
        intakeIntakePositioner.setInverted(false);
        LiveWindow.addActuator("Intake", "IntakePositioner", (CANTalon) intakeIntakePositioner);
        
        encoder = new Encoder(3, 4, false, Encoder.EncodingType.k4X);
        encoder.setReverseDirection(true);
        encoder.setPIDSourceType(PIDSourceType.kDisplacement);
       
        pot = new AnalogPotentiometer(1, 5);
        LiveWindow.addSensor("Intake", "Pot", pot);
        
        gyro = new ADXRS450_Gyro();
        LiveWindow.addSensor("Gyro", "Gyro", gyro);
        accel = new ADXL362(Range.k2G);
        
        flashLightRelay = new Relay(0);
    }
    
   
    
}
